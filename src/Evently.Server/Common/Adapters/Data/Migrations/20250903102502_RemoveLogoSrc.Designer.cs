// <auto-generated />
using System;
using Evently.Server.Common.Adapters.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Evently.Server.Common.Adapters.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250903102502_RemoveLogoSrc")]
    partial class RemoveLogoSrc
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "empty-user-12345",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "EMPTY-CONCURRENCY-STAMP-12345",
                            Email = "empty@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Empty User",
                            NormalizedEmail = "EMPTY@EXAMPLE.COM",
                            NormalizedUserName = "EMPTY_USER",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "EMPTY-SECURITY-STAMP-12345",
                            TwoFactorEnabled = false,
                            UserName = "empty_user"
                        },
                        new
                        {
                            Id = "guest-user-22222",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "EMPTY-CONCURRENCY-STAMP-12345",
                            Email = "guest@example.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Guest User",
                            NormalizedEmail = "GUEST@EXAMPLE.COM",
                            NormalizedUserName = "GUEST_USER_2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "EMPTY-SECURITY-STAMP-12345",
                            TwoFactorEnabled = false,
                            UserName = "guest_user2"
                        });
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Booking", b =>
                {
                    b.Property<string>("BookingId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AttendeeId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset?>("CancellationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CheckInDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CheckoutDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("GatheringId")
                        .HasColumnType("bigint");

                    b.HasKey("BookingId");

                    b.HasIndex("AttendeeId");

                    b.HasIndex("GatheringId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = "book_abc123456",
                            AttendeeId = "guest-user-22222",
                            CreationDateTime = new DateTimeOffset(new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GatheringId = 1L
                        },
                        new
                        {
                            BookingId = "book_def789012",
                            AttendeeId = "empty-user-12345",
                            CreationDateTime = new DateTimeOffset(new DateTime(2024, 1, 1, 1, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            GatheringId = 2L
                        });
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CategoryId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("CategoryId"), 20L, null, null, null, null, null);

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1L,
                            Approved = false,
                            CategoryName = "Information Technology"
                        },
                        new
                        {
                            CategoryId = 2L,
                            Approved = false,
                            CategoryName = "Business & Networking"
                        },
                        new
                        {
                            CategoryId = 3L,
                            Approved = false,
                            CategoryName = "Arts & Culture"
                        });
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Gathering", b =>
                {
                    b.Property<long>("GatheringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GatheringId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<long>("GatheringId"), 20L, null, null, null, null, null);

                    b.Property<DateTimeOffset?>("CancellationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CoverSrc")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<DateTimeOffset>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OrganiserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GatheringId");

                    b.ToTable("Gatherings");

                    b.HasData(
                        new
                        {
                            GatheringId = 1L,
                            CoverSrc = "",
                            Description = "A comprehensive summit exploring the latest in AI and machine learning",
                            End = new DateTimeOffset(new DateTime(2025, 12, 5, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Marina Bay Sands Convention Centre, Singapore",
                            Name = "Tech Innovation Summit",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 5, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 2L,
                            CoverSrc = "",
                            Description = "Connect with fellow entrepreneurs and investors",
                            End = new DateTimeOffset(new DateTime(2025, 12, 10, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Clarke Quay Central, Singapore",
                            Name = "Startup Networking Night",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 10, 18, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 3L,
                            CoverSrc = "",
                            Description = "Showcasing contemporary digital art from emerging artists",
                            End = new DateTimeOffset(new DateTime(2025, 12, 15, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "National Gallery Singapore",
                            Name = "Digital Art Exhibition",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 15, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 4L,
                            CoverSrc = "",
                            Description = "Learn modern web development techniques and best practices",
                            End = new DateTimeOffset(new DateTime(2025, 12, 8, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Singapore Science Centre",
                            Name = "Web Development Workshop",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 8, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 5L,
                            CoverSrc = "",
                            Description = "Advanced strategies for scaling your business",
                            End = new DateTimeOffset(new DateTime(2025, 12, 20, 16, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Raffles City Convention Centre, Singapore",
                            Name = "Business Strategy Seminar",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 20, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 6L,
                            CoverSrc = "",
                            Description = "Professional photography techniques and portfolio building",
                            End = new DateTimeOffset(new DateTime(2025, 12, 22, 12, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Gardens by the Bay, Singapore",
                            Name = "Photography Masterclass",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 22, 8, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 7L,
                            CoverSrc = "",
                            Description = "Intensive bootcamp covering iOS and Android development",
                            End = new DateTimeOffset(new DateTime(2025, 12, 12, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "NUS School of Computing, Singapore",
                            Name = "Mobile App Development Bootcamp",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 12, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 8L,
                            CoverSrc = "",
                            Description = "Learn about personal finance and investment strategies",
                            End = new DateTimeOffset(new DateTime(2025, 12, 25, 17, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Suntec Singapore Convention Centre",
                            Name = "Investment & Finance Forum",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 25, 14, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 9L,
                            CoverSrc = "",
                            Description = "Explore storytelling techniques and creative expression",
                            End = new DateTimeOffset(new DateTime(2025, 12, 28, 15, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Esplanade Theatres, Singapore",
                            Name = "Creative Writing Workshop",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 28, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 10L,
                            CoverSrc = "",
                            Description = "Latest trends in cloud architecture and DevOps",
                            End = new DateTimeOffset(new DateTime(2025, 12, 30, 17, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Singapore EXPO",
                            Name = "Cloud Computing Conference",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2025, 12, 30, 9, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 11L,
                            CoverSrc = "",
                            Description = "Build and scale your online business effectively",
                            End = new DateTimeOffset(new DateTime(2026, 1, 3, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Marina Bay Financial Centre, Singapore",
                            Name = "E-commerce Mastery",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2026, 1, 3, 13, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 12L,
                            CoverSrc = "",
                            Description = "An evening of modern dance and artistic expression",
                            End = new DateTimeOffset(new DateTime(2026, 1, 5, 22, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Victoria Theatre, Singapore",
                            Name = "Contemporary Dance Performance",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2026, 1, 5, 19, 30, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 13L,
                            CoverSrc = "",
                            Description = "Essential cybersecurity practices for businesses",
                            End = new DateTimeOffset(new DateTime(2026, 1, 8, 16, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Singapore Management University",
                            Name = "Cybersecurity Awareness Training",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2026, 1, 8, 10, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 14L,
                            CoverSrc = "",
                            Description = "Develop essential leadership skills for modern managers",
                            End = new DateTimeOffset(new DateTime(2026, 1, 10, 17, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Orchard Hotel Singapore",
                            Name = "Leadership Excellence Workshop",
                            OrganiserId = "empty-user-12345",
                            Start = new DateTimeOffset(new DateTime(2026, 1, 10, 9, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            GatheringId = 15L,
                            CoverSrc = "",
                            Description = "Independent filmmakers present their latest works",
                            End = new DateTimeOffset(new DateTime(2026, 1, 12, 23, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Location = "Singapore International Film Festival Venue",
                            Name = "Film & Media Production Showcase",
                            OrganiserId = "guest-user-22222",
                            Start = new DateTimeOffset(new DateTime(2026, 1, 12, 18, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.GatheringCategoryDetail", b =>
                {
                    b.Property<long>("GatheringId")
                        .HasColumnType("bigint");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("GatheringId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("GatheringCategoryDetails");

                    b.HasData(
                        new
                        {
                            GatheringId = 1L,
                            CategoryId = 1L
                        },
                        new
                        {
                            GatheringId = 2L,
                            CategoryId = 2L
                        },
                        new
                        {
                            GatheringId = 3L,
                            CategoryId = 3L
                        },
                        new
                        {
                            GatheringId = 4L,
                            CategoryId = 1L
                        },
                        new
                        {
                            GatheringId = 5L,
                            CategoryId = 2L
                        },
                        new
                        {
                            GatheringId = 6L,
                            CategoryId = 3L
                        },
                        new
                        {
                            GatheringId = 7L,
                            CategoryId = 1L
                        },
                        new
                        {
                            GatheringId = 8L,
                            CategoryId = 2L
                        },
                        new
                        {
                            GatheringId = 9L,
                            CategoryId = 3L
                        },
                        new
                        {
                            GatheringId = 10L,
                            CategoryId = 1L
                        },
                        new
                        {
                            GatheringId = 11L,
                            CategoryId = 2L
                        },
                        new
                        {
                            GatheringId = 12L,
                            CategoryId = 3L
                        },
                        new
                        {
                            GatheringId = 13L,
                            CategoryId = 1L
                        },
                        new
                        {
                            GatheringId = 14L,
                            CategoryId = 2L
                        },
                        new
                        {
                            GatheringId = 15L,
                            CategoryId = 3L
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Booking", b =>
                {
                    b.HasOne("Evently.Server.Common.Domains.Entities.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evently.Server.Common.Domains.Entities.Gathering", "Gathering")
                        .WithMany("Bookings")
                        .HasForeignKey("GatheringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Gathering");
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.GatheringCategoryDetail", b =>
                {
                    b.HasOne("Evently.Server.Common.Domains.Entities.Category", "Category")
                        .WithMany("GatheringCategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evently.Server.Common.Domains.Entities.Gathering", "Gathering")
                        .WithMany("GatheringCategoryDetails")
                        .HasForeignKey("GatheringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Gathering");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Evently.Server.Common.Domains.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Evently.Server.Common.Domains.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Evently.Server.Common.Domains.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Evently.Server.Common.Domains.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Account", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Category", b =>
                {
                    b.Navigation("GatheringCategoryDetails");
                });

            modelBuilder.Entity("Evently.Server.Common.Domains.Entities.Gathering", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("GatheringCategoryDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
