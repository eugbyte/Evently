/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as HealthcheckIndexRouteImport } from './routes/healthcheck/index'
import { Route as GatheringsIndexRouteImport } from './routes/gatherings/index'
import { Route as LoginCallbackRouteImport } from './routes/login/callback'
import { Route as BookingsHostingRouteImport } from './routes/bookings/hosting'
import { Route as BookingsAttendingRouteImport } from './routes/bookings/attending'
import { Route as GatheringsGatheringIdIndexRouteImport } from './routes/gatherings/$gatheringId/index'
import { Route as GatheringsGatheringIdUpdateRouteImport } from './routes/gatherings/$gatheringId/update'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const HealthcheckIndexRoute = HealthcheckIndexRouteImport.update({
  id: '/healthcheck/',
  path: '/healthcheck/',
  getParentRoute: () => rootRouteImport,
} as any)
const GatheringsIndexRoute = GatheringsIndexRouteImport.update({
  id: '/gatherings/',
  path: '/gatherings/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginCallbackRoute = LoginCallbackRouteImport.update({
  id: '/login/callback',
  path: '/login/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingsHostingRoute = BookingsHostingRouteImport.update({
  id: '/bookings/hosting',
  path: '/bookings/hosting',
  getParentRoute: () => rootRouteImport,
} as any)
const BookingsAttendingRoute = BookingsAttendingRouteImport.update({
  id: '/bookings/attending',
  path: '/bookings/attending',
  getParentRoute: () => rootRouteImport,
} as any)
const GatheringsGatheringIdIndexRoute =
  GatheringsGatheringIdIndexRouteImport.update({
    id: '/gatherings/$gatheringId/',
    path: '/gatherings/$gatheringId/',
    getParentRoute: () => rootRouteImport,
  } as any)
const GatheringsGatheringIdUpdateRoute =
  GatheringsGatheringIdUpdateRouteImport.update({
    id: '/gatherings/$gatheringId/update',
    path: '/gatherings/$gatheringId/update',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bookings/attending': typeof BookingsAttendingRoute
  '/bookings/hosting': typeof BookingsHostingRoute
  '/login/callback': typeof LoginCallbackRoute
  '/gatherings': typeof GatheringsIndexRoute
  '/healthcheck': typeof HealthcheckIndexRoute
  '/login': typeof LoginIndexRoute
  '/gatherings/$gatheringId/update': typeof GatheringsGatheringIdUpdateRoute
  '/gatherings/$gatheringId': typeof GatheringsGatheringIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bookings/attending': typeof BookingsAttendingRoute
  '/bookings/hosting': typeof BookingsHostingRoute
  '/login/callback': typeof LoginCallbackRoute
  '/gatherings': typeof GatheringsIndexRoute
  '/healthcheck': typeof HealthcheckIndexRoute
  '/login': typeof LoginIndexRoute
  '/gatherings/$gatheringId/update': typeof GatheringsGatheringIdUpdateRoute
  '/gatherings/$gatheringId': typeof GatheringsGatheringIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bookings/attending': typeof BookingsAttendingRoute
  '/bookings/hosting': typeof BookingsHostingRoute
  '/login/callback': typeof LoginCallbackRoute
  '/gatherings/': typeof GatheringsIndexRoute
  '/healthcheck/': typeof HealthcheckIndexRoute
  '/login/': typeof LoginIndexRoute
  '/gatherings/$gatheringId/update': typeof GatheringsGatheringIdUpdateRoute
  '/gatherings/$gatheringId/': typeof GatheringsGatheringIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bookings/attending'
    | '/bookings/hosting'
    | '/login/callback'
    | '/gatherings'
    | '/healthcheck'
    | '/login'
    | '/gatherings/$gatheringId/update'
    | '/gatherings/$gatheringId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bookings/attending'
    | '/bookings/hosting'
    | '/login/callback'
    | '/gatherings'
    | '/healthcheck'
    | '/login'
    | '/gatherings/$gatheringId/update'
    | '/gatherings/$gatheringId'
  id:
    | '__root__'
    | '/'
    | '/bookings/attending'
    | '/bookings/hosting'
    | '/login/callback'
    | '/gatherings/'
    | '/healthcheck/'
    | '/login/'
    | '/gatherings/$gatheringId/update'
    | '/gatherings/$gatheringId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BookingsAttendingRoute: typeof BookingsAttendingRoute
  BookingsHostingRoute: typeof BookingsHostingRoute
  LoginCallbackRoute: typeof LoginCallbackRoute
  GatheringsIndexRoute: typeof GatheringsIndexRoute
  HealthcheckIndexRoute: typeof HealthcheckIndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  GatheringsGatheringIdUpdateRoute: typeof GatheringsGatheringIdUpdateRoute
  GatheringsGatheringIdIndexRoute: typeof GatheringsGatheringIdIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/healthcheck/': {
      id: '/healthcheck/'
      path: '/healthcheck'
      fullPath: '/healthcheck'
      preLoaderRoute: typeof HealthcheckIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gatherings/': {
      id: '/gatherings/'
      path: '/gatherings'
      fullPath: '/gatherings'
      preLoaderRoute: typeof GatheringsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/callback': {
      id: '/login/callback'
      path: '/login/callback'
      fullPath: '/login/callback'
      preLoaderRoute: typeof LoginCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookings/hosting': {
      id: '/bookings/hosting'
      path: '/bookings/hosting'
      fullPath: '/bookings/hosting'
      preLoaderRoute: typeof BookingsHostingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bookings/attending': {
      id: '/bookings/attending'
      path: '/bookings/attending'
      fullPath: '/bookings/attending'
      preLoaderRoute: typeof BookingsAttendingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gatherings/$gatheringId/': {
      id: '/gatherings/$gatheringId/'
      path: '/gatherings/$gatheringId'
      fullPath: '/gatherings/$gatheringId'
      preLoaderRoute: typeof GatheringsGatheringIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/gatherings/$gatheringId/update': {
      id: '/gatherings/$gatheringId/update'
      path: '/gatherings/$gatheringId/update'
      fullPath: '/gatherings/$gatheringId/update'
      preLoaderRoute: typeof GatheringsGatheringIdUpdateRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BookingsAttendingRoute: BookingsAttendingRoute,
  BookingsHostingRoute: BookingsHostingRoute,
  LoginCallbackRoute: LoginCallbackRoute,
  GatheringsIndexRoute: GatheringsIndexRoute,
  HealthcheckIndexRoute: HealthcheckIndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  GatheringsGatheringIdUpdateRoute: GatheringsGatheringIdUpdateRoute,
  GatheringsGatheringIdIndexRoute: GatheringsGatheringIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
